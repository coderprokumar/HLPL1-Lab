#include "std_lib_facilities.h"

template < typename T, typename A >
struct Vector_Base {
    A Alloc; 				                                                          // ALLOCATER
    T* Elem; 				                                                          // START OF ALLOCATION
    int SZ; 				                                                          // NUMBER OF ELEMENTS
    int Space;                                                                                    // AMOUNT OF ALLOCATED SPACE

	Vector_Base( const A& a, int n )
	    : Alloc { a }, Elem { Alloc.allocate ( n ) }, SZ { n }, Space { n } { }

    ~Vector_Base( ) {                                                                             // DESTRUCTOR
		for ( int i = 0; i < this->SZ; ++i ) {
			Alloc.destroy ( &Elem [ i ] );
		}
		Alloc.deallocate ( Elem, Space );
	}

	Vector_Base() : Elem{ nullptr }, SZ { 0 }, Space { 0 } {                                 // DEFAULT CONSTRUCTOR
	};
};

template < typename T, typename A = allocator < T >>
class Class_Vector : private Vector_Base < T, A > {

public:

	Class_Vector ( ) : Vector_Base < T, A > ( ) {                                           // DEFAULT CONSTRUCTOR
	}

	explicit Class_Vector ( size_t s ) : Vector_Base < T, A > ( this->Alloc, s ) { 	        // NORMAL CONSTRUCTOR
		for ( T* p = this->Elem; p != this->Elem + s; p++ ) {
			this->Alloc.construct ( p, T ( ) );
		}
	}

	Class_Vector ( const Class_Vector < T, A >& vec );					 // COPY CONSTRUCTOR
	Class_Vector < T, A >& operator = (const Class_Vector < T, A >& vec);			 // COPY ASSIGNMENT

	Class_Vector( Class_Vector < T, A >&& vec);						 // MOVE CONSTRUCTOR
	Class_Vector < T, A >& operator = ( Class_Vector < T, A >&& vec);		         // MOVE ASSIGNMENT


	T& operator [ ] ( int n ) {	                                                         // FOR NON-CONSTANT VECTORS
		return this->Elem [ n ];
	}

	int Size ( ) const {                                                                     // SIZE VECTOR
		return this->SZ; 
	};

	void Print();                                                                           // PRINT VECTOR

	void Reserve ( int newalloc );                                                         // RESERVE VECTOR

	int Capacity ( ) const {                                                               // CAPACITY OF VECTOR
		return this->Space;
	}

	void Resize ( int newsize, T val = T ( ) );                                           // RESIZING THE VECTOR

	void Push_Back ( T& val );                                                            // PUSH BACK THE VALUE

	T& at ( int n ) {
		if ( n < 0 || this->SZ < n )
			throw std::out_of_range ( "It is out of the Range!" );
		return this->Elem [ n ];
	}
};


template < typename T, typename A > Class_Vector < T, A >&Class_Vector < T, A > :: operator = ( const Class_Vector < T, A >& vec ) {
	if ( this == &vec ) {
		return *this;
	}
	if ( vec.SZ <= this->Space ) {					                      //NEVER DECREASE DE-ALLLOCATION
		copy ( vec.Elem, vec.Elem + vec.SZ, this->Elem );
	
		for ( int i = vec.sz; i < this->SZ; ++i ) {
			this->Alloc.destroy ( &this->Elem [ i ] );
		}

		this->SZ = vec.SZ;
		return *this;
	}

	T* p = this->Alloc.allocate ( vec.SZ ); 					       // ALLOCATE NEW SPACE
	copy ( vec.Elem, vec.Elem + vec.SZ, p ); 				               // COPY ELEMENTS

	for ( int i = 0; i < this->SZ; ++i ) {						       // DEALLOCATE OLD SPACE
		this->Alloc.destroy ( &this->Elem [ i ] );
	}

	this->Alloc.deallocate ( this->Elem, this->Space );
	this->Space = this->SZ = vec.SZ;
	this->Elem = p; 								      // NOW WE CAN RESET Elem

	return *this; 									      // RETURN A SELF-REFERENCE
}


template < typename T, typename A > Class_Vector < T, A >& Class_Vector < T, A > :: operator = ( Class_Vector < T, A >&& vec ) { // MOVE ASSIGNMENT

	for ( int i = 0; i < this->SZ; ++i ) {	                                              // DE-ALLOCATE OLD SPACE
		this->Alloc.destroy( &this->Elem [ i ] );
	}

	this->Alloc.deallocate ( this->Elem, this->Space );
	this->Elem = vec.Elem; 			                                             // COPY a'S Elem AND SZ.
	this->SZ = vec.SZ;
	this->Space = vec.Space;

	vec.Elem = nullptr; 		                                                    // MAKE a THE EMPTY VECTOR
	vec.SZ = 0;

	return *this; 			                                                    // RETURN A SELF-REFERENCE

}


template < typename T, typename A > Class_Vector < T, A > :: Class_Vector ( const Class_Vector < T, A >& vec ) : Vector_Base < T, A > { vec.Alloc, vec.size ( ) } {	// COPY CONSTRUCTOR
	copy ( vec.Elem, vec.Elem + vec->SZ, this->Elem );
}


template < typename T, typename A > Class_Vector < T,A > :: Class_Vector ( Class_Vector < T, A > && vec ) : Vector_Base < T, A > { vec.SZ, vec.Elem, vec.Space } { // MOVE CONSTRUCTOR
	vec.SZ = 0;
	vec.Elem = nullptr;
}


template < typename T, typename A > void Class_Vector < T, A > :: Reserve ( int newalloc ) { // RESERVE
	if ( newalloc <= this->Space ) return; 				                    // NEVER DECREASE ALLOCATION

	T* p = this->Alloc.allocate( newalloc); 				            // ALLOCATE NEW SPACE

	for ( int i = 0; i < this->SZ; ++i ) {
		this->Alloc.construct(&p [ i ], this->Elem [ i ] );	                   // COPY OLD ELEMENTS
	}

	for ( int i = 0; i < this->SZ; ++i ) { 					           // DE-ALLOCATE OLD SPACE
		this->Alloc.destroy( &this->Elem [ i ] );
	}

	this->Alloc.deallocate( this->Elem, this->Space );
	this->Elem = p;
	this->Space = newalloc;
}


template < typename T, typename A > void Class_Vector < T, A > :: Resize (int newsize, T val ) {
	Reserve( newsize );

	for ( int i = this->SZ; i < newsize; i++ ) {
		this->Alloc.construct( &this->Elem [ i ], val );
	}

	for ( int i = newsize; i < this->SZ; i++ ) {
		this->Alloc.destroy( &this->Elem [ i ] );
	}

	this->SZ = newsize;
}


template < typename T, typename A > void Class_Vector < T, A > :: Push_Back ( T& val ) { //INCREASE VECTOR SIZE BY ONE; INITALIZE THE NEW ELEMENT WITH D
	
	if ( this->Space == 0 ) {
		Reserve(8); 								     // START WITH SPACE FOR 8 ELEMENTS
	}
	else if ( this->SZ == this->Space ){
		Reserve( 2 * this->Space ); 					            // GET MORE SPACE
    } 

	this->Alloc.construct( &this->Elem [ this->SZ ], val );
	++this->SZ; 								            // INCREASE THE SZ (SZ IS THE NUMBER OF ELEMENTS.)
}


template < typename T, typename A > void Class_Vector < T, A >:: Print() {
	for ( int i = 0; i < this->SZ; i++ ) {
		cout << this->Elem [ i ] << "  ";
	}
	cout << endl;
}

int main( ) {
	try {
		Class_Vector < string > p ( 2 );
		p [ 0 ] = "First";
		p [ 1 ] = "Second";

		cout << p.at(3)<< endl;
	}
	catch( out_of_range e ) {
		cout << e.what ( ) << endl;
	}
	
	Class_Vector < double >* n_p = new Class_Vector < double > ( );
	cout << "AT INITAL STAGE SIZE IS 0 AND CAPACITY IS 0 TOO." << endl;
	cout << n_p->Size ( ) << endl;
	cout << n_p->Capacity ( ) << endl << endl;
    
	cout << "AT LATER STAGE WHEN WE HAVE INCREASED THE SIZE TO 10 AND CAPACITY WILL BE 10 TOO." << endl;
	n_p->Resize ( 10 );
	cout << n_p->Size ( ) << endl;
	cout << n_p->Capacity ( ) << endl << endl;

	double x = 2;
	n_p->Push_Back ( x );
    
	cout << "BUT HERE WHEN WE TRIED TO PUSH BACK A NUMBER SIZE INCREASED BY ONE. BUT CAPACITY DOUBLED AS WE HAVE STATED IN PROGRAM" << endl;
	cout << n_p->Size ( ) << endl;
	cout << n_p->Capacity ( ) << endl;

	cout << "ELEMENTS IN THE VECTOR: ";
	n_p->Print ( );
	cout << endl; 

	//COPY CHECK
	Class_Vector <double >* Copy_p (n_p );
    
	cout << "CREATING A COPY VECTOR OF FIRST VECTOR." << endl;
	cout << Copy_p->Size ( ) << endl;
	cout << Copy_p->Capacity ( ) << endl;

	cout << "ELEMENTS IN THE COPY VECTOR: ";
	Copy_p->Print ( );
        cout << endl; 

	Class_Vector < double >* Copy_Assign = Copy_p;

	cout << "CREATING A COPY VECTOR OF THE COPY VECTOR." << endl;
	cout << Copy_Assign->Size ( ) << endl;
	cout << Copy_Assign->Capacity ( ) << endl;

	cout << "ELEMENTS IN THE OTHER COPY VECTOR: ";
        Copy_Assign->Print ( );
        cout << endl;
	
	return 0;
}
